import telebot
import os
import db.init_db as init_db

from db.dao import *
from telebot import types
from dotenv import load_dotenv
from constants import *
from spawner import *
from utils import utils

# TODO: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —Ñ–∞–π–ª–∞–º
# TODO: –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–≥–µ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π

init_db.initialize_db()
load_dotenv()


edit_state={}
print([f"{teacher.name}_{teacher.id}" for teacher in TeacherDao().get_teachers()])
 
bot = telebot.TeleBot(os.getenv(API_TOKEN))

@bot.message_handler(commands=['start'])
def send_main_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(*spawn_dict_menu([main_menu_buttons]),row_width=1)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∫–æ–º–∞–Ω–¥:", reply_markup=markup)

@bot.message_handler(commands=['admin_menu'])
def send_admin_panel(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(*spawn_dict_menu([admin_menu_buttons]),row_width=1)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∫–æ–º–∞–Ω–¥:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï–• –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–æ—Ç–µ, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω 
# TODO: —Ä–∞–∑–±–∏—Ç—å —ç—Ç–æ, –Ω–µ—á–∏—Ç–∞–±–µ–ª—å–Ω–æ
@bot.callback_query_handler(func=lambda call: True)
def handle_user_button(call):
    if call.message.chat.id in edit_state:
        del edit_state[call.message.chat.id]
             
    which_but = call.data                                             
    if which_but == GET_SCHEDULE_COMMAND:
        refresh_inline_menu(call, change_menu(TODAY_SCHEDULE_MENU, message=call.message),text=UNKNOWN_FUNCTION_ERROR)
    elif which_but == GET_CONTACTS_COMMAND:
        info = read_text_file(CONTACT_INFO_PATH)
        refresh_inline_menu(call, change_menu(BACK_MENU, message=call.message),info ,parse_mode="html")
    elif which_but == GET_BOT_INFO_COMMAND:
        info = read_text_file(BOT_INFO_PATH)
        refresh_inline_menu(call, change_menu(BACK_MENU, message=call.message),info ,parse_mode="html")
    elif which_but == GET_CALENDAR_COMMAND:
        refresh_inline_menu(call, change_menu(CALENDAR_MENU, message=call.message),"üìÜ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:")
    elif which_but == BACK_TO_ADMIN_COMMAND:
        refresh_inline_menu(call, change_menu(ADMIN_MENU, message=call.message), one_row=True ,text="–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∫–æ–º–∞–Ω–¥:" )
    elif which_but == BACK_TO_MAIN_COMMAND:
        refresh_inline_menu(call, change_menu(MAIN_MENU, message=call.message), one_row=True ,text="–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –∫–æ–º–∞–Ω–¥:" )
    elif which_but == CRUD_TEACHER_COMMAND:
        menu = change_menu(CRUD_TEACHER_MENU)
        menu.append(spawn_back_button(True ,command_type=BACK_TO_ADMIN_COMMAND))
        refresh_inline_menu(call, list_markup=menu, one_row=True, text="üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á—ñ: ")
        
    elif which_but.startswith(tuple([ADD, EDIT, DELETE])):
        crud_distributor(which_but, call)
    elif which_but.startswith("day_"):
        refresh_inline_menu(call, change_menu(TODAY_SCHEDULE_MENU, message=call.message), UNKNOWN_FUNCTION_ERROR)
    elif which_but == IGNORE_COMMAND:
        pass
    else:
        refresh_inline_menu(call, change_menu(BACK_MENU), UNKNOWN_FUNCTION_ERROR)

 
# –†–∞—Å–ø–µ—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ü–∏–π CRUD –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ö–µ–Ω–¥–ª–µ—Ä      
def crud_distributor(command:str, call):
    chat_id = call.message.chat.id
    crud_command = utils.truncate_string(command)
    entity=utils.truncate_string(command, part=1)
    entity_id = utils.truncate_string(command, part=2)
    if len(entity)==0:
        refresh_inline_menu(call, 
                            spawn_back_button(command_type=BACK_TO_ADMIN_COMMAND), 
                            text=WRONG_COMMAND_ERROR)
    if entity == TEACHER:
        if crud_command == ADD:
            send_new_message("‚úç –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∏–∫–ª–∞–¥–∞—á–∞: ", chat_id=chat_id)
            edit_state[chat_id] = {'action':command}
        # TODO: —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏, –≤ –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–µ—Ä–µ —Ç–æ–ª—å–∫–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
        if crud_command == DELETE:
            if len(entity_id) == 0:
                query = TeacherDao().get_teachers()
                buttons=[]
                button_text = ''
                if len(query) != 0:
                    button_text = '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞:'
                    buttons=[spawn_inline_button(button_text=teacher.name,
                                               callback_data=f"{DELETE}_{TEACHER}_{teacher.id}") for teacher in query]
                else:
                    button_text='üôà –í–∏–∫–ª–∞–¥–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
                buttons.append(spawn_back_button(return_type=True, command_type=BACK_TO_ADMIN_COMMAND))
                refresh_inline_menu(call, one_row=True,list_markup=buttons, text=button_text)
            else:
                del_result = TeacherDao().delete_teacher(entity_id)
                refresh_inline_menu(call, list_markup=spawn_back_button(command_type=BACK_TO_ADMIN_COMMAND),text=del_result.message)


# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–µ–ª—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥,–Ω–∞–ø—Ä–∏–º–µ—Ä –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤ —Å–ª–æ–≤–∞—Ä—å –∑–∞–Ω–æ—Å–∏—Ç—å—Å—è –≤–∞—à
# –¢–ì-–∞–π–¥–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –¥–µ–ª–∞–µ—Ç–µ, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –∏ –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ –¥–µ–π—Å—Ç–≤–∏–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
# –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—è –∏–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –≤–≤–µ–ª–∏
@bot.message_handler(func=lambda message:message.chat.id in edit_state)    
def crud_handler(message):
    chat_id = message.chat.id
    try:
        command = edit_state[chat_id]['action']
        if command == f"{ADD}_{TEACHER}":
            r = TeacherDao().create_new_teacher(message.text)
            send_new_message(message=r.message,
                                markup_list=spawn_back_button(command_type=BACK_TO_ADMIN_COMMAND),
                                chat_id=chat_id)
            
    except KeyError as e:
        send_new_message(WRONG_COMMAND_ERROR, 
                            spawn_back_button(command_type=BACK_TO_ADMIN_COMMAND),
                            chat_id=chat_id)
    del edit_state[chat_id]    

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–º–µ—Å—Ç–µ —Å –ª—é–±—ã–º –º–∞—Ä–∫–∞–ø–æ–º(–æ–±—ã—á–Ω–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é)
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∏ —Ñ–∞–∫—Ç—ã: —Å–æ–æ–±—â–µ–Ω–∏–µ(–æ—à–∏–±–∫–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏), –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞(–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)
def send_new_message(message:str, chat_id:int, markup_list:list=None ):
    markup = types.InlineKeyboardMarkup()
    if markup_list != None:
        markup.add(*markup_list, row_width=1)
    bot.send_message(chat_id=chat_id, reply_markup=markup, text=message)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç (–æ—Å–≤–µ–∂–∞–µ—Ç:D) —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
# –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
def refresh_inline_menu(call, list_markup:list, text='', one_row=False, parse_mode=None):
#{
    markup = types.InlineKeyboardMarkup()
    is_double_list = False
    for mp in list_markup:
        if isinstance(mp, list):
            markup.row(*mp)
            is_double_list = True
    if not is_double_list:
        markup.add(*list_markup, row_width=1 if one_row else None) 
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup= markup,
        parse_mode= parse_mode,
        disable_web_page_preview=True
        )
#}

# –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω—É–∂–Ω–æ–≥–æ –º–µ–Ω—é

def change_menu(menu_name, message=None):
    if menu_name == MAIN_MENU:
        return spawn_dict_menu([main_menu_buttons])
    if menu_name == ADMIN_MENU:
        return spawn_dict_menu([admin_menu_buttons])
    elif menu_name == BACK_MENU:
        return spawn_back_button()
    elif menu_name == CALENDAR_MENU:
        return spawn_calendar_menu()
    elif menu_name == TODAY_SCHEDULE_MENU:
        return spawn_today_schedule_menu()   
    elif menu_name == CRUD_TEACHER_MENU:
        return spawn_dict_menu([crud_menu_buttons], crud_entity=TEACHER) 

# —ç—Ç–æ —É—Ç–∏–ª–∏—Ç–∞(–∑–Ω–∞—á–∏—Ç –Ω–∞–¥–æ –≤—ã–Ω–µ—Å—Ç–∏ –µ—ë –Ω–∞—Ö—É–π –≤ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –Ω–µ —Ç–∞–∫ –ª–∏)
def read_text_file(env_path):
    try:
        base_dir = os.path.dirname(__file__)
        text_file_path = os.getenv(env_path)
        if not text_file_path:
            return UNKNOWN_FUNCTION_ERROR
        file_path = os.path.join(os.path.join(base_dir, "wwwroot"), text_file_path)
        with open(file_path, 'r', encoding="utf-8") as file:
            content = file.read()
        return content
    except FileNotFoundError as e:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {file_path}. {e}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    return UNKNOWN_FUNCTION_ERROR

# TODO: —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é main –≥–¥–µ —Å–¥–µ–ª–∞—Ç—å !–í–ê–ñ–ù–´–ï –≤—ã–∑–æ–≤—ã —á—Ç–æ–±—ã –±–æ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–∏–Ω–≥
if __name__ == '__main__':
    bot.infinity_polling()